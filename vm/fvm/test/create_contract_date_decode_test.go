package test

import (
	"encoding/binary"
	"fmt"

	"github.com/AsimovNetwork/asimov/common"
	"testing"
)

func TestDecodeContractDate(t *testing.T) {
	data := encodeSlice()

	index := 0
	validLen := 2

	// assert.True(len(data) > validLen, t)
	category := binary.BigEndian.Uint16(data[index:validLen])
	fmt.Println(category)
	index = validLen
	validLen += 4

	// assert.True(len(data) > validLen, t)
	nameLength := binary.BigEndian.Uint32(data[index:validLen])
	fmt.Println(nameLength)
	index = validLen
	validLen += int(nameLength)

	// assert.True(len(data) > validLen, t)
	templateName := string(data[index:validLen])
	fmt.Println(templateName)
	index = validLen
	validLen += 4

	// assert.True(len(data) > validLen, t)
	byteCodeLength := binary.BigEndian.Uint32(data[index:validLen])
	fmt.Println(byteCodeLength)
	index = validLen
	validLen += int(byteCodeLength)

	// assert.True(len(data) > validLen, t)
	byteCode := data[index:validLen]
	fmt.Println(byteCode)
	index = validLen

	constructor := data[index:]
	fmt.Println(constructor)
}

func encodeSlice() []byte {
	// TemplateType
	templateType := make([]byte, 2)
	binary.BigEndian.PutUint16(templateType, uint16(8))
	templateTypeHex := common.Bytes2Hex(templateType)

	// Name
	nameHex := common.Bytes2Hex([]byte("templateA"))

	// Name length
	nameLength := make([]byte, 4)
	binary.BigEndian.PutUint32(nameLength, uint32(len(common.Hex2Bytes(nameHex))))
	nameLengthHex := common.Bytes2Hex(nameLength)

	// ByteCode
	codeHex := "608060405234801561001057600080fd5b506040516102ca3803806102ca83398101806040528101908080518201929190602001805182019291905050508160009080519060200190610053929190610072565b50806001908051906020019061006a929190610072565b505050610117565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100b357805160ff19168380011785556100e1565b828001600101855582156100e1579182015b828111156100e05782518255916020019190600101906100c5565b5b5090506100ee91906100f2565b5090565b61011491905b808211156101105760008160009055506001016100f8565b5090565b90565b6101a4806101266000396000f300608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063954ab4b214610046575b600080fd5b34801561005257600080fd5b5061005b6100d6565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561009b578082015181840152602081019050610080565b50505050905090810190601f1680156100c85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b606060018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561016e5780601f106101435761010080835404028352916020019161016e565b820191906000526020600020905b81548152906001019060200180831161015157829003601f168201915b50505050509050905600a165627a7a72305820f82f551389a5a528ce34daf88984394b8faebfb94040262836fd6ac3395e9a280029"

	// ByteCode length
	byteCodeLength := make([]byte, 4)
	binary.BigEndian.PutUint32(byteCodeLength, uint32(len(common.Hex2Bytes(codeHex))))
	byteCodeLengthHex := common.Bytes2Hex(byteCodeLength)

	// Constructor
	constructorHex := "00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000974656d706c61746541000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000036363630000000000000000000000000000000000000000000000000000000000"

	dataHex := templateTypeHex + nameLengthHex + nameHex + byteCodeLengthHex + codeHex + constructorHex

	fmt.Println(dataHex)
	fmt.Println(common.Hex2Bytes(dataHex))
	return common.Hex2Bytes(dataHex)
}
